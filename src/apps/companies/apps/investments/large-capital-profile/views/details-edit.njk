{% from "select/macro.njk" import govukSelect %}

{% block body %}
    {% component 'react-slot', {
        id: 'edit-large-capital-investor-details',
        props: props
    } %}
{% endblock %}

{% call Form({
  buttonText: 'Save',
  buttonDataAttr: 'investorDetailsSave',
  returnText: 'Cancel',
  class: 'investor-details-edit',
  returnLink: '/companies/' + company.id + '/investments/large-capital-profile',
  action: '/companies/' + company.id + '/investments/large-capital-profile/update',
  hiddenFields: {
    profileId: profile.id,
    editing: profile.editing
  }
}) %}

{# TODO: Remove this block of code when is done #}
  {# {{
    govukSelect({
      name: 'investorType',
      label: {
        text: 'Investor type'
      },
      attributes: {
        'data-test': 'investorType'
      },
      items: profile.investorDetails.investorType.items
    })
  }}

  {{
    govukInput({
      type: 'number',
      name: 'globalAssetsUnderManagement',
      label: {
        text: 'Global assets under management'
      },
      hint: {
        text: 'Enter value in US dollars'
      },
      attributes: {
        'data-test': 'globalAssetsUnderManagement'
      },
      value: profile.investorDetails.globalAssetsUnderManagement.value
    })
  }}

  {{
    govukInput({
      type: 'number',
      name: 'investableCapital',
      label: {
        text: 'Investable capital'
      },
      hint: {
        text: 'Enter value in US dollars'
      },
      attributes: {
        'data-test': 'investableCapital'
      },
      value: profile.investorDetails.investableCapital.value
    })
  }}

  {{
    govukTextarea({
      name: 'investorDescription',
      label: {
        text: 'Investor description'
      },
      hint: {
        html: '<span>Enter any additional relevant information.</span>For instance when founded, ownership, purpose and strategy.',
        classes: 'investor-description'
      },
      attributes: {
        'data-test': 'investorDescription'
      },
      value: profile.investorDetails.investorDescription.value
    })
  }}

  {% macro conditional(props) %}
    {% set date = props.date or {} %}

    {{
      govukDateInput({
        namePrefix: props.value,
        id: props.text | camelCase,
        fieldset: {
          legend: {
            text: 'Date of most recent checks'
          }
        },
        hint: {
          text: 'For example, 12 11 2015'
        },
        attributes: {
          'data-test': ('requiredChecks' + props.text) | camelCase
        },
        items: [
          {
            classes: 'govuk-input--width-2',
            name: 'day',
            value: date.day
          },
          {
            classes: 'govuk-input--width-2',
            name: 'month',
            value: date.month
          },
          {
            classes: 'govuk-input--width-4',
            name: 'year',
            value: date.year
          }
        ]
      })
    }}

    {{
      Typeahead({
        entity: 'adviser',
        name: props.value + '-adviser',
        label: 'Person responsible for most recent checks',
        classes: 'c-form-group--no-filter',
        autoSubmit: false,
        isAsync: false,
        useSubLabel: true,
        multipleSelect: false,
        value: props.adviser.id,
        options: props.advisers
      })
    }}
  {% endmacro %}

  {% set requiredChecks =  profile.investorDetails.requiredChecks %} #}

  {# {{
    govukRadios({
      name: 'requiredChecks',
      fieldset: {
        legend: {
          text: 'Has this investor cleared the required checks within the last 12 months?',
          classes: 'govuk-fieldset__legend--s'
        }
      },
      attributes: {
        'data-test': 'requiredChecks'
      },
      items: [
        {
          value: requiredChecks.cleared.value,
          text:  requiredChecks.cleared.text,
          checked: requiredChecks.cleared.checked,
          conditional: {
            html: conditional(requiredChecks.cleared)
          }
        },
        {
          value: requiredChecks.issuesIdentified.value,
          text:  requiredChecks.issuesIdentified.text,
          checked: requiredChecks.issuesIdentified.checked,
          conditional: {
            html: conditional(requiredChecks.issuesIdentified)
          }
        },
        {
          value: requiredChecks.notYetChecked.value,
          text:  requiredChecks.notYetChecked.text,
          checked: requiredChecks.notYetChecked.checked
        },
        {
          value: requiredChecks.notRequired.value,
          text:  requiredChecks.notRequired.text,
          checked: requiredChecks.notRequired.checked
        }
      ]
    })
  }} #}

{% endcall %}
