"use strict";(self.webpackChunkdata_hub_frontend=self.webpackChunkdata_hub_frontend||[]).push([[7163],{"./src/client/components/Form/elements/__stories__/FieldChoice.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checkbox:()=>Checkbox,CheckboxChecked:()=>CheckboxChecked,CheckboxHint:()=>CheckboxHint,CheckboxInline:()=>CheckboxInline,CheckboxLabel:()=>CheckboxLabel,CheckboxLegend:()=>CheckboxLegend,CheckboxRequired:()=>CheckboxRequired,Radio:()=>Radio,RadioHint:()=>RadioHint,RadioInline:()=>RadioInline,RadioLabel:()=>RadioLabel,RadioLegend:()=>RadioLegend,RadioRequired:()=>RadioRequired,RadioSelected:()=>RadioSelected,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-primitive.js"),__webpack_require__("./node_modules/core-js/modules/es.number.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.freeze.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js");var react__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("./node_modules/react/index.js"),_govuk_react_heading__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("./node_modules/@govuk-react/heading/dist/govuk-react-heading.esm.js"),styled_components__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),_FieldChoice__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("./src/client/components/Form/elements/FieldChoice/index.jsx"),___WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("./src/client/components/Form/index.jsx");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var _templateObject,_templateObject2,_templateObject3,_excluded=["component","initialValues"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var inline=(0,styled_components__WEBPACK_IMPORTED_MODULE_23__.AH)(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  fieldset div {\n    display: flex;\n  }\n  fieldset div label {\n    margin-right: 10px;\n  }\n"]))),FieldChoiceRadioInline=(0,styled_components__WEBPACK_IMPORTED_MODULE_23__.Ay)(_FieldChoice__WEBPACK_IMPORTED_MODULE_21__.A.Radio)(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n  ","\n"])),inline),FieldChoiceCheckboxInline=(0,styled_components__WEBPACK_IMPORTED_MODULE_23__.Ay)(_FieldChoice__WEBPACK_IMPORTED_MODULE_21__.A.Checkbox)(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n  ","\n"])),inline),options=[{value:"0",label:"England"},{value:"1",label:"Wales"},{value:"2",label:"Scotland"},{value:"3",label:"Northern Ireland"}],formatOption=function formatOption(option){return"{ value: '".concat(option.value,"', label: '").concat(option.label,"' }")};const __WEBPACK_DEFAULT_EXPORT__={title:"Form/Form Elements/FieldChoice",component:_FieldChoice__WEBPACK_IMPORTED_MODULE_21__.A,args:{options,name:"country",component:_FieldChoice__WEBPACK_IMPORTED_MODULE_21__.A},argTypes:{type:"string",initialValues:{control:"object"}},parameters:{docs:{description:{component:'The <b>FieldChoice</b> component is designed to render a group of radio buttons or checkboxes by setting the prop type to either <b>"radio"</b> or <b>"checkbox"</b>.\n        The component sets the entire selected option (Object) to the Form\'s state which is helpful on user journeys where the final page is a summary page and you\n        need to pullout a name (or any other field) from a previous selection to display it to the user. At present, <b>FieldRadio</b> only writes the ID (String) to the form state.'}}}};var Template=function Template(_ref,_ref2){var Component=_ref.component,initialValues=_ref.initialValues,args=function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.indexOf(n)>=0)continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(_ref,_excluded),storyId=_ref2.id;return react__WEBPACK_IMPORTED_MODULE_19__.createElement(___WEBPACK_IMPORTED_MODULE_22__.A,{id:storyId,analyticsFormName:"formRadio",submissionTaskName:"SUBMISSION",initialValues},(function(state){return react__WEBPACK_IMPORTED_MODULE_19__.createElement(react__WEBPACK_IMPORTED_MODULE_19__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_19__.createElement(Component,args),react__WEBPACK_IMPORTED_MODULE_19__.createElement("pre",null,JSON.stringify(state,null,2)))}))},defaultFormProps='\n  id="form-id"\n  analyticsFormName="formRadio"\n  submissionTaskName="SUBMISSION"',getForm=function getForm(_ref3){var component=_ref3.component,formProp=_ref3.formProp,componentProp=_ref3.componentProp,formProps=formProp?"".concat(defaultFormProps,"\n  ").concat(formProp):" ".concat(defaultFormProps),componentProps=componentProp?"".concat('name="country"',"\n      ").concat(componentProp):"".concat('name="country"');return"\n<Form ".concat(formProps,">\n  {(state) => (\n    <").concat(component,"\n      ").concat(componentProps,"\n      options={[\n        ").concat(formatOption(options[0]),"\n        ").concat(formatOption(options[1]),"\n        ").concat(formatOption(options[2]),"\n        ").concat(formatOption(options[3]),"\n      ]}\n    />\n  )}\n</Form>\n")},Radio=Template.bind({});Radio.args={type:"radio"},Radio.parameters={docs:{description:{story:"A group of 4 radio buttons"},source:{code:getForm({component:"FieldChoice.Radio"})}}};var RadioLabel=Template.bind({});RadioLabel.args=_objectSpread(_objectSpread({},Radio.args),{},{label:"Countries"}),RadioLabel.parameters={docs:{description:{story:"Radio button group label"},source:{code:getForm({component:"FieldChoice.Radio",componentProp:'label="Countries"'})}}};var RadioHint=Template.bind({});RadioHint.args=_objectSpread(_objectSpread({},Radio.args),{},{hint:"Country hint"}),RadioHint.parameters={docs:{description:{story:"Radio button group hint text"},source:{code:getForm({component:"FieldChoice.Radio",componentProp:'hint="Country hint"'})}}};var RadioLegend=Template.bind({});RadioLegend.args=_objectSpread(_objectSpread({},Radio.args),{},{legend:react__WEBPACK_IMPORTED_MODULE_19__.createElement("h1",null,"My H1 legend")}),RadioLegend.parameters={docs:{description:{story:"Radio button group legend"},source:{code:getForm({component:"FieldChoice.Radio",componentProp:"legend={<H1>My H1 legend</H1>}"})}}};var RadioInline=Template.bind({});RadioInline.args=_objectSpread(_objectSpread({},Radio.args),{},{component:FieldChoiceRadioInline}),RadioInline.parameters={docs:{description:{story:"Radio button group inline"},source:{code:getForm({component:"FieldChoiceRadioInline"})}}};var RadioRequired=Template.bind({});RadioRequired.args=_objectSpread(_objectSpread({},Radio.args),{},{required:"Select at least one country"}),RadioRequired.parameters={docs:{description:{story:'Radio button group where a selection is required. Click "Save" to view the form validation error message.'},source:{code:getForm({component:"FieldChoice.Radio",componentProp:'required="Select at least one country"'})}}};var RadioSelected=Template.bind({});RadioSelected.args=_objectSpread(_objectSpread({},Radio.args),{},{initialValues:{country:options[0]}}),RadioSelected.parameters={docs:{description:{story:"Radio button group selected"},source:{code:getForm({component:"FieldChoice.Radio",formProp:"initialValues={{country: ".concat(formatOption(options[0]),"}}")})}}};var Checkbox=Template.bind({});Checkbox.args={type:"checkbox"},Checkbox.parameters={docs:{description:{story:"A group of 4 checkboxes."},source:{code:getForm({component:"FieldChoice.Checkbox"})}}};var CheckboxLabel=Template.bind({});CheckboxLabel.args=_objectSpread(_objectSpread({},Checkbox.args),{},{label:"Countries"}),CheckboxLabel.parameters={docs:{description:{story:"Checkbox group label"},source:{code:getForm({component:"FieldChoice.Checkbox",componentProp:'label="Countries"'})}}};var CheckboxHint=Template.bind({});CheckboxHint.args=_objectSpread(_objectSpread({},Checkbox.args),{},{hint:"Country hint"}),CheckboxHint.parameters={docs:{description:{story:"Checkbox group hint text"},source:{code:getForm({component:"FieldChoice.Checkbox",componentProp:'hint="Country hint"'})}}};var CheckboxLegend=Template.bind({});CheckboxLegend.args=_objectSpread(_objectSpread({},Checkbox.args),{},{legend:react__WEBPACK_IMPORTED_MODULE_19__.createElement(_govuk_react_heading__WEBPACK_IMPORTED_MODULE_20__.H1,null,"My H1 legend")}),CheckboxLegend.parameters={docs:{description:{story:"Checkbox group legend"},source:{code:getForm({component:"FieldChoice.Checkbox",componentProp:"legend={<H1>My H1 legend</H1>}"})}}};var CheckboxInline=Template.bind({});CheckboxInline.args=_objectSpread(_objectSpread({},Checkbox.args),{},{component:FieldChoiceCheckboxInline}),CheckboxInline.parameters={docs:{description:{story:"Checkbox group inline"},source:{code:getForm({component:"FieldChoiceCheckboxInline"})}}};var CheckboxRequired=Template.bind({});CheckboxRequired.args=_objectSpread(_objectSpread({},Checkbox.args),{},{required:"Choose one or more countries"}),CheckboxRequired.parameters={docs:{description:{story:'Checkbox group where a user must choose at least one country. Click "Save" to view the form validation error message.'},source:{code:getForm({component:"FieldChoice.Checkbox",componentProp:'required="Choose one or more countries"'})}}};var CheckboxChecked=Template.bind({});CheckboxChecked.args=_objectSpread(_objectSpread({},Checkbox.args),{},{initialValues:{country:[options[0],options[1]]}}),CheckboxChecked.parameters={docs:{description:{story:"Checkbox group checked"},source:{code:getForm({component:"FieldChoice.Checkbox",formProp:"initialValues={{ country: [".concat(function formatOptions(options){return options.map(formatOption)}([options[0],options[1]]),"]}}")})}}},Radio.parameters={...Radio.parameters,docs:{...Radio.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...Radio.parameters?.docs?.source}}},RadioLabel.parameters={...RadioLabel.parameters,docs:{...RadioLabel.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioLabel.parameters?.docs?.source}}},RadioHint.parameters={...RadioHint.parameters,docs:{...RadioHint.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioHint.parameters?.docs?.source}}},RadioLegend.parameters={...RadioLegend.parameters,docs:{...RadioLegend.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioLegend.parameters?.docs?.source}}},RadioInline.parameters={...RadioInline.parameters,docs:{...RadioInline.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioInline.parameters?.docs?.source}}},RadioRequired.parameters={...RadioRequired.parameters,docs:{...RadioRequired.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioRequired.parameters?.docs?.source}}},RadioSelected.parameters={...RadioSelected.parameters,docs:{...RadioSelected.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...RadioSelected.parameters?.docs?.source}}},Checkbox.parameters={...Checkbox.parameters,docs:{...Checkbox.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...Checkbox.parameters?.docs?.source}}},CheckboxLabel.parameters={...CheckboxLabel.parameters,docs:{...CheckboxLabel.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxLabel.parameters?.docs?.source}}},CheckboxHint.parameters={...CheckboxHint.parameters,docs:{...CheckboxHint.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxHint.parameters?.docs?.source}}},CheckboxLegend.parameters={...CheckboxLegend.parameters,docs:{...CheckboxLegend.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxLegend.parameters?.docs?.source}}},CheckboxInline.parameters={...CheckboxInline.parameters,docs:{...CheckboxInline.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxInline.parameters?.docs?.source}}},CheckboxRequired.parameters={...CheckboxRequired.parameters,docs:{...CheckboxRequired.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxRequired.parameters?.docs?.source}}},CheckboxChecked.parameters={...CheckboxChecked.parameters,docs:{...CheckboxChecked.parameters?.docs,source:{originalSource:'({\n  component: Component,\n  initialValues,\n  ...args\n}, {\n  id: storyId\n}) => <Form id={storyId} analyticsFormName="formRadio" submissionTaskName="SUBMISSION" initialValues={initialValues}>\n    {state => <>\n        <Component {...args} />\n        <pre>{JSON.stringify(state, null, 2)}</pre>\n      </>}\n  </Form>',...CheckboxChecked.parameters?.docs?.source}}};const __namedExportsOrder=["Radio","RadioLabel","RadioHint","RadioLegend","RadioInline","RadioRequired","RadioSelected","Checkbox","CheckboxLabel","CheckboxHint","CheckboxLegend","CheckboxInline","CheckboxRequired","CheckboxChecked"]}}]);