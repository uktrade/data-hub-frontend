"use strict";(self.webpackChunkdata_hub_frontend=self.webpackChunkdata_hub_frontend||[]).push([[9580],{"./src/client/components/Form/__stories__/Form.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basics:()=>Basics,DocsPlaceholder:()=>DocsPlaceholder,InitialValuesPassedAsProp:()=>InitialValuesPassedAsProp,MultiStep:()=>MultiStep,RejectedInitialValues:()=>RejectedInitialValues,ResourceOptionsFields:()=>ResourceOptionsFields,SoftReactRouterRedirect:()=>SoftReactRouterRedirect,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Form_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/react-router-dom/dist/index.js"),react_router_dist=__webpack_require__("./node_modules/react-router/dist/index.js"),Form=__webpack_require__("./src/client/components/Form/index.jsx"),FieldInput=__webpack_require__("./src/client/components/Form/elements/FieldInput/index.jsx"),FieldSelect=__webpack_require__("./src/client/components/Form/elements/FieldSelect/index.jsx"),FieldRadios=__webpack_require__("./src/client/components/Form/elements/FieldRadios/index.jsx"),FieldCheckboxes=__webpack_require__("./src/client/components/Form/elements/FieldCheckboxes/index.jsx"),FieldTypeahead=__webpack_require__("./src/client/components/Form/elements/FieldTypeahead/index.jsx"),Step=__webpack_require__("./src/client/components/Form/elements/Step.jsx");var ResourceOptionsField=__webpack_require__("./src/client/components/Form/elements/ResourceOptionsField/index.jsx"),Resource=__webpack_require__("./src/client/components/Resource/Resource.jsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const DummyResource=props=>react.createElement(Resource.Ay,_extends({},props,{name:"Load options"})),Form_stories={title:"Form"},DocsPlaceholder=()=>react.createElement("p",null,"This is a workaround to get the DocsPage to work with multiInstance components. The form props are fully documented"," ",react.createElement("a",{href:"https://github.com/uktrade/data-hub-frontend/blob/main/src/client/components/Form/index.jsx#L467"},"in the component's docstring."));DocsPlaceholder.story={name:"Docs placeholder"};const Basics=()=>react.createElement(Form.A,{id:"task-form-example-resolve-initial-values",submissionTaskName:"Submit Form example",initialValuesTaskName:"Load initial values",initialValuesPayload:"resolve",transformInitialValues:initialValues=>({...initialValues,reject:"yes"}),analyticsFormName:"formExample",redirectTo:(submissionTaskResult,formValues)=>"#"+JSON.stringify({submissionTaskResult,formValues}),flashMessage:(submissionTaskResult,formValues)=>"Form was submitted successfully"},react.createElement(FieldInput.A,{name:"foo",type:"text",label:"Foo",hint:'Initial value should be "Blah Blah"',required:"Foo is required"}),react.createElement(FieldSelect.A,{name:"bar",label:"Bar",hint:'Initial value should be "B".',required:"Bar is required",options:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"C",value:"c"}]}),react.createElement(FieldRadios.A,{name:"reject",label:"Reject",hint:"Should the submission task reject?",options:[{label:"Yes",value:"yes"},{label:"No",value:"no"}]}),react.createElement("p",null,"This example redirects to the same path with the result of the submission task together with the submitted form values JSON serialized in the URL fragment."),react.createElement("p",null,"Note that the expected result of a resolved submission is a hard redirection, which can only be seen in Storybook when the canvas is open in it's own tab."),react.createElement("p",null,"The form stays in the progress state until the next page is loaded"));Basics.story={parameters:{docs:{storyDescription:"A form component which does the following:\n * Starts a _task_ when the form is submitted\n * Renders a {ProgressBox} overlay while the _task_ is in progress\n * Handles the _task_ rejection by delegating it to the underlying {TaskProgressBox}\n * Can optionally be prepopulated with initial values resolved from a _task_\n\nThe form also has the following functionality built in:\n * Error summary rendered on top of the form when there are validation errors\n * Submit button and secondary action links\n * Success flash message on _task_ resolution\n * Redirection after the _submission task_ resolves\n * Recording Google Tag Manager events\n\n### A basic Form example\n\nThis is a basic example of all the capabilities of `Form`. It:\n\n- Can resolve initial values for its fields with a _task_\n- Will start a task when the form is submitted with a map of field values sent\n  as a payload to the task\n- Renders a flash message when the _submission task_ resolves\n- Hard-redirects when when the _submission task_ resolves\n- Creates analytics events on submission, step advancement and submission task\n  rejection/resolution"}}};const ResourceOptionsFields=()=>react.createElement(Form.A,{id:"lazy-field-example",submissionTaskName:"Submit Form example",analyticsFormName:"formExample",initialValues:{select:"b",typeahead:{label:"B",value:"b"}}},react.createElement(ResourceOptionsField.A,{resource:DummyResource,field:FieldSelect.A,id:"select",payload:[{id:"a",name:"A"},{id:"b",name:"B"},{id:"c",name:"C"}],resultToOptions:result=>result.map((({id,name})=>({value:id,label:name}))),name:"select",label:"Select",hint:'Initial value shold be "B".',required:"Required"}),react.createElement(ResourceOptionsField.A,{taskName:"Load options",field:FieldRadios.A,id:"radios",payload:[{id:"a",name:"A"},{id:"b",name:"B"},{id:"c",name:"C"}],resultToOptions:result=>result.map((({id,name})=>({value:id,label:name}))),name:"radios",label:"Radios",hint:"Uses taskName instead of resource. Initial value should be 'B'",required:"Required"}),react.createElement(ResourceOptionsField.A,{resource:DummyResource,field:FieldCheckboxes.A,id:"checkboxes-reject",payload:[{id:"a",name:"A"},{id:"b",name:"B"},{id:"c",name:"C"}],resultToOptions:result=>result.map((({id,name})=>({value:id,label:name}))),name:"checkboxes",label:"Checkboxes",hint:"Should Reject.",required:"Required"}),react.createElement(ResourceOptionsField.A,{resource:DummyResource,field:FieldTypeahead.A,id:"typeahead",payload:[{id:"a",name:"A"},{id:"b",name:"B"},{id:"c",name:"C"}],resultToOptions:result=>result.map((({id,name})=>({value:id,label:name}))),name:"typeahead",label:"Typeahead",hint:"Default value should be 'b'",required:"Required"}));ResourceOptionsFields.story={name:"Resource options fields"};const RejectedInitialValues=()=>react.createElement(Form.A,{id:"task-form-example-reject-initial-values",submissionTaskName:"Submit Form example",initialValuesTaskName:"Load initial values",initialValuesPayload:"reject",analyticsFormName:"formExample",redirectTo:(submissionTaskResult,formValues)=>"#"+JSON.stringify({submissionTaskResult,formValues}),flashMessage:(submissionTaskResult,formValues)=>"Form was submitted successfully"},react.createElement(FieldInput.A,{name:"foo",type:"text",label:"Foo"}),react.createElement(FieldSelect.A,{name:"bar",label:"Bar",options:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"C",value:"c"}]}));RejectedInitialValues.story={name:"Rejected initial values",parameters:{docs:{storyDescription:"The `Form` can resolve its initial values with the _task_ mechanism. This example demonstrates the rejection of the initial values task."}}};const InitialValuesPassedAsProp=()=>react.createElement(Form.A,{id:"task-form-example-initialValues-prop",submissionTaskName:"Submit Form example",analyticsFormName:"formExample",initialValues:{foo:"Foo",bar:"b"},redirectTo:(submissionTaskResult,formValues)=>"#"+JSON.stringify({submissionTaskResult,formValues}),flashMessage:(submissionTaskResult,formValues)=>"Form was submitted successfully"},react.createElement(FieldInput.A,{name:"foo",type:"text",label:"Foo",required:"Foo is required"}),react.createElement(FieldSelect.A,{name:"bar",label:"Bar",required:"Bar is required",initialValue:"c",options:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"C",value:"c"}]}),react.createElement(FieldInput.A,{name:"baz",type:"text",label:"Baz",required:"Baz is required",initialValue:"Baz"}));InitialValuesPassedAsProp.story={name:"Initial values passed as prop",parameters:{docs:{storyDescription:"The initial values of `Form` can also be set with the `initialValues` prop."}}};const MultiStep=()=>react.createElement(Form.A,{id:"task-form-example-multi-step",submissionTaskName:"Submit Form example",initialValuesTaskName:"Load initial values",initialValuesPayload:"resolve",transformInitialValues:initialValues=>({...initialValues,reject:"yes"}),analyticsFormName:"formExample",redirectTo:(submissionTaskResult,formValues)=>"#"+JSON.stringify({submissionTaskResult,formValues}),flashMessage:(submissionTaskResult,formValues)=>"Form was submitted successfully",onSuccess:(result,values)=>alert(JSON.stringify({result,values},null,2))},react.createElement(Step.A,{name:"step-1"},react.createElement(FieldInput.A,{name:"foo",type:"text",label:"Foo",hint:'Initial value should be "Blah Blah"',required:"Foo is required"})),react.createElement(Step.A,{name:"step-2"},react.createElement(FieldSelect.A,{name:"bar",label:"Bar",hint:'Initial value should be "B".',required:"Bar is required",options:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"C",value:"c"}]})),react.createElement(Step.A,{name:"step-3"},react.createElement(FieldRadios.A,{name:"reject",label:"Reject",hint:"Should the submission task reject?",options:[{label:"Yes",value:"yes"},{label:"No",value:"no"}]})));MultiStep.story={name:"Multi step"};const SoftReactRouterRedirect=()=>react.createElement(dist.Switch,null,react.createElement(react_router_dist.qh,{path:"/iframe.html"},react.createElement(Form.A,{id:"task-form-example-resolve-initial-values",submissionTaskName:"Submit Form example",initialValuesTaskName:"Load initial values",initialValuesPayload:"resolve",redirectMode:"soft",transformInitialValues:initialValues=>({...initialValues,reject:"yes"}),analyticsFormName:"formExample",redirectTo:(submissionTaskResult,formValues)=>"/success",flashMessage:(submissionTaskResult,formValues)=>"Form was submitted successfully"},react.createElement(FieldInput.A,{name:"foo",type:"text",label:"Foo",hint:'Initial value should be "Blah Blah"',required:"Foo is required"}),react.createElement(FieldSelect.A,{name:"bar",label:"Bar",hint:'Initial value should be "B".',required:"Bar is required",options:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"C",value:"c"}]}),react.createElement(FieldRadios.A,{name:"reject",label:"Reject",hint:"Should the submission task reject?",options:[{label:"Yes",value:"yes"},{label:"No",value:"no"}]}))),react.createElement(react_router_dist.qh,{path:"/success"},"The submission task resolved",react.createElement("br",null),react.createElement(dist.N_,{to:"/iframe.html"},"Back to form")));SoftReactRouterRedirect.story={name:"Soft (React-Router) redirect",parameters:{docs:{storyDescription:"The `Form` component supports a _hard_ and _soft_ redirection mode, which\nyou can control with the `redirectMode` prop.\nThe default _hard_ mode redirects by altering `window.location.href`, the\n_soft_ mode uses React-Router.\n\nThis example demonstrates the _soft_ (React-Router) redirection."}}};const __namedExportsOrder=["DocsPlaceholder","Basics","ResourceOptionsFields","RejectedInitialValues","InitialValuesPassedAsProp","MultiStep","SoftReactRouterRedirect"];DocsPlaceholder.parameters={...DocsPlaceholder.parameters,docs:{...DocsPlaceholder.parameters?.docs,source:{originalSource:"() => <p>\n    This is a workaround to get the DocsPage to work with multiInstance\n    components. The form props are fully documented{' '}\n    <a href=\"https://github.com/uktrade/data-hub-frontend/blob/main/src/client/components/Form/index.jsx#L467\">\n      in the component's docstring.\n    </a>\n  </p>",...DocsPlaceholder.parameters?.docs?.source}}},Basics.parameters={...Basics.parameters,docs:{...Basics.parameters?.docs,source:{originalSource:'() => <Form id="task-form-example-resolve-initial-values" submissionTaskName="Submit Form example" initialValuesTaskName="Load initial values" initialValuesPayload="resolve" transformInitialValues={initialValues => ({\n  ...initialValues,\n  reject: \'yes\'\n})} analyticsFormName="formExample" redirectTo={(submissionTaskResult, formValues) => \'#\' + JSON.stringify({\n  submissionTaskResult,\n  formValues\n})}\n// eslint-disable-next-line no-unused-vars\nflashMessage={(submissionTaskResult, formValues) => \'Form was submitted successfully\'}>\n    <FieldInput name="foo" type="text" label="Foo" hint=\'Initial value should be "Blah Blah"\' required="Foo is required" />\n    <FieldSelect name="bar" label="Bar" hint=\'Initial value should be "B".\' required="Bar is required" options={[{\n    label: \'A\',\n    value: \'a\'\n  }, {\n    label: \'B\',\n    value: \'b\'\n  }, {\n    label: \'C\',\n    value: \'c\'\n  }]} />\n    <FieldRadios name="reject" label="Reject" hint="Should the submission task reject?" options={[{\n    label: \'Yes\',\n    value: \'yes\'\n  }, {\n    label: \'No\',\n    value: \'no\'\n  }]} />\n    <p>\n      This example redirects to the same path with the result of the submission\n      task together with the submitted form values JSON serialized in the URL\n      fragment.\n    </p>\n    <p>\n      Note that the expected result of a resolved submission is a hard\n      redirection, which can only be seen in Storybook when the canvas is open\n      in it\'s own tab.\n    </p>\n    <p>The form stays in the progress state until the next page is loaded</p>\n  </Form>',...Basics.parameters?.docs?.source}}},ResourceOptionsFields.parameters={...ResourceOptionsFields.parameters,docs:{...ResourceOptionsFields.parameters?.docs,source:{originalSource:"() => <Form id=\"lazy-field-example\" submissionTaskName=\"Submit Form example\" analyticsFormName=\"formExample\" initialValues={{\n  select: 'b',\n  // radios: 'b',\n  // checkboxes: ['a', 'c'],\n  typeahead: {\n    label: 'B',\n    value: 'b'\n  }\n}}>\n    <ResourceOptionsField resource={DummyResource} field={FieldSelect} id=\"select\" payload={[{\n    id: 'a',\n    name: 'A'\n  }, {\n    id: 'b',\n    name: 'B'\n  }, {\n    id: 'c',\n    name: 'C'\n  }]} resultToOptions={result => result.map(({\n    id,\n    name\n  }) => ({\n    value: id,\n    label: name\n  }))} name=\"select\" label=\"Select\" hint='Initial value shold be \"B\".' required=\"Required\" />\n    <ResourceOptionsField taskName=\"Load options\" field={FieldRadios} id=\"radios\" payload={[{\n    id: 'a',\n    name: 'A'\n  }, {\n    id: 'b',\n    name: 'B'\n  }, {\n    id: 'c',\n    name: 'C'\n  }]} resultToOptions={result => result.map(({\n    id,\n    name\n  }) => ({\n    value: id,\n    label: name\n  }))} name=\"radios\" label=\"Radios\" hint=\"Uses taskName instead of resource. Initial value should be 'B'\" required=\"Required\" />\n    <ResourceOptionsField resource={DummyResource} field={FieldCheckboxes} id=\"checkboxes-reject\" payload={[{\n    id: 'a',\n    name: 'A'\n  }, {\n    id: 'b',\n    name: 'B'\n  }, {\n    id: 'c',\n    name: 'C'\n  }]} resultToOptions={result => result.map(({\n    id,\n    name\n  }) => ({\n    value: id,\n    label: name\n  }))} name=\"checkboxes\" label=\"Checkboxes\" hint=\"Should Reject.\" required=\"Required\" />\n    <ResourceOptionsField resource={DummyResource} field={FieldTypeahead} id=\"typeahead\" payload={[{\n    id: 'a',\n    name: 'A'\n  }, {\n    id: 'b',\n    name: 'B'\n  }, {\n    id: 'c',\n    name: 'C'\n  }]} resultToOptions={result => result.map(({\n    id,\n    name\n  }) => ({\n    value: id,\n    label: name\n  }))} name=\"typeahead\" label=\"Typeahead\" hint=\"Default value should be 'b'\" required=\"Required\" />\n  </Form>",...ResourceOptionsFields.parameters?.docs?.source}}},RejectedInitialValues.parameters={...RejectedInitialValues.parameters,docs:{...RejectedInitialValues.parameters?.docs,source:{originalSource:'() => <Form id="task-form-example-reject-initial-values" submissionTaskName="Submit Form example" initialValuesTaskName="Load initial values" initialValuesPayload="reject" analyticsFormName="formExample" redirectTo={(submissionTaskResult, formValues) => \'#\' + JSON.stringify({\n  submissionTaskResult,\n  formValues\n})}\n// eslint-disable-next-line no-unused-vars\nflashMessage={(submissionTaskResult, formValues) => \'Form was submitted successfully\'}>\n    <FieldInput name="foo" type="text" label="Foo" />\n    <FieldSelect name="bar" label="Bar" options={[{\n    label: \'A\',\n    value: \'a\'\n  }, {\n    label: \'B\',\n    value: \'b\'\n  }, {\n    label: \'C\',\n    value: \'c\'\n  }]} />\n  </Form>',...RejectedInitialValues.parameters?.docs?.source}}},InitialValuesPassedAsProp.parameters={...InitialValuesPassedAsProp.parameters,docs:{...InitialValuesPassedAsProp.parameters?.docs,source:{originalSource:'() => <Form id="task-form-example-initialValues-prop" submissionTaskName="Submit Form example" analyticsFormName="formExample" initialValues={{\n  foo: \'Foo\',\n  bar: \'b\'\n}} redirectTo={(submissionTaskResult, formValues) => \'#\' + JSON.stringify({\n  submissionTaskResult,\n  formValues\n})}\n// eslint-disable-next-line no-unused-vars\nflashMessage={(submissionTaskResult, formValues) => \'Form was submitted successfully\'}>\n    <FieldInput name="foo" type="text" label="Foo" required="Foo is required" />\n    <FieldSelect name="bar" label="Bar" required="Bar is required" initialValue="c" options={[{\n    label: \'A\',\n    value: \'a\'\n  }, {\n    label: \'B\',\n    value: \'b\'\n  }, {\n    label: \'C\',\n    value: \'c\'\n  }]} />\n    <FieldInput name="baz" type="text" label="Baz" required="Baz is required" initialValue="Baz" />\n  </Form>',...InitialValuesPassedAsProp.parameters?.docs?.source}}},MultiStep.parameters={...MultiStep.parameters,docs:{...MultiStep.parameters?.docs,source:{originalSource:'() => <Form id="task-form-example-multi-step" submissionTaskName="Submit Form example" initialValuesTaskName="Load initial values" initialValuesPayload="resolve" transformInitialValues={initialValues => ({\n  ...initialValues,\n  reject: \'yes\'\n})} analyticsFormName="formExample" redirectTo={(submissionTaskResult, formValues) => \'#\' + JSON.stringify({\n  submissionTaskResult,\n  formValues\n})}\n// eslint-disable-next-line no-unused-vars\nflashMessage={(submissionTaskResult, formValues) => \'Form was submitted successfully\'} onSuccess={(result, values) => alert(JSON.stringify({\n  result,\n  values\n}, null, 2))}>\n    <Step name="step-1">\n      <FieldInput name="foo" type="text" label="Foo" hint=\'Initial value should be "Blah Blah"\' required="Foo is required" />\n    </Step>\n    <Step name="step-2">\n      <FieldSelect name="bar" label="Bar" hint=\'Initial value should be "B".\' required="Bar is required" options={[{\n      label: \'A\',\n      value: \'a\'\n    }, {\n      label: \'B\',\n      value: \'b\'\n    }, {\n      label: \'C\',\n      value: \'c\'\n    }]} />\n    </Step>\n    <Step name="step-3">\n      <FieldRadios name="reject" label="Reject" hint="Should the submission task reject?" options={[{\n      label: \'Yes\',\n      value: \'yes\'\n    }, {\n      label: \'No\',\n      value: \'no\'\n    }]} />\n    </Step>\n  </Form>',...MultiStep.parameters?.docs?.source}}},SoftReactRouterRedirect.parameters={...SoftReactRouterRedirect.parameters,docs:{...SoftReactRouterRedirect.parameters?.docs,source:{originalSource:'() => <Switch>\n    <Route path="/iframe.html">\n      <Form id="task-form-example-resolve-initial-values" submissionTaskName="Submit Form example" initialValuesTaskName="Load initial values" initialValuesPayload="resolve" redirectMode="soft" transformInitialValues={initialValues => ({\n      ...initialValues,\n      reject: \'yes\'\n    })} analyticsFormName="formExample"\n    // eslint-disable-next-line no-unused-vars\n    redirectTo={(submissionTaskResult, formValues) => \'/success\'}\n    // eslint-disable-next-line no-unused-vars\n    flashMessage={(submissionTaskResult, formValues) => \'Form was submitted successfully\'}>\n        <FieldInput name="foo" type="text" label="Foo" hint=\'Initial value should be "Blah Blah"\' required="Foo is required" />\n        <FieldSelect name="bar" label="Bar" hint=\'Initial value should be "B".\' required="Bar is required" options={[{\n        label: \'A\',\n        value: \'a\'\n      }, {\n        label: \'B\',\n        value: \'b\'\n      }, {\n        label: \'C\',\n        value: \'c\'\n      }]} />\n        <FieldRadios name="reject" label="Reject" hint="Should the submission task reject?" options={[{\n        label: \'Yes\',\n        value: \'yes\'\n      }, {\n        label: \'No\',\n        value: \'no\'\n      }]} />\n      </Form>\n    </Route>\n    <Route path="/success">\n      The submission task resolved\n      <br />\n      <Link to="/iframe.html">Back to form</Link>\n    </Route>\n  </Switch>',...SoftReactRouterRedirect.parameters?.docs?.source}}}}}]);