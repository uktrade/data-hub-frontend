{% from "./form-group.njk" import FormGroup %}
{% from "./text-field.njk" import TextField %}
{% from "./multiple-choice-field.njk" import MultipleChoiceField %}

{##
 # Render a collection for multiple fields for add another functionality
 # @param {object} props - An object containing field properties
 # @param {array} [props.value] - Input values
 # @param {array} [props.element=fieldset]
 # @param {object} [props.inputData] - Data attributes to add to input control
 #}
{% macro AddAnother(props) %}
  {% set fieldId = 'field-' + props.name + ('-' + props.idSuffix if props.idSuffix) if props.name %}
  {% set element = props.element | default('fieldset') %}
  {% set data = props.inputData if props.inputData %}

  {% call FormGroup(props | assign({ fieldId: fieldId, element: element, groupClassName: 'c-form-group c-form-fieldset' })) %}
    <div class="js-AddItems" data-item-selector=".c-form-group--AddItems">

      {% if props.value %}
        {% if props.value.length <= 0 %}
          {{ renderAsMacro(props.children, { modifier: 'AddItems', inputData: data } ) }}
        {% else %}
          {% for individualValue in props.value %}
              {{ renderAsMacro(
                props.children,
                { value: individualValue, modifier: 'AddItems', inputData: data }
            ) }}
          {% endfor %}
        {% endif %}
      {% else %}
        {{ renderAsMacro(props.children, { modifier: 'AddItems', inputData: props.inputData } ) }}
      {% endif %}

      <p class="c-form-fieldset__add-another">
        <input
          class="govuk-button govuk-button--secondary js-AddItems__add{{ typeaheadClassModifier }}"
          type="submit"
          name="{{ props.buttonName }}"
          value="Add another"
          data-persist-values="true"
          data-test="{{ props.fieldId }}-add_button"/>
      </p>
    </div>
  {% endcall %}
{% endmacro %}
